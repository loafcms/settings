<?php

namespace Loaf\Settings\Http\Resources;

use Illuminate\Foundation\Http\FormRequest;
use Loaf\Settings\Configuration\Group;
use Loaf\Settings\Configuration\Section;
use Loaf\Settings\SettingsException;
use Loaf\Settings\SettingsManager;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;

class UpdateSectionRequest extends FormRequest
{
    /**
     * @var Section
     */
    private $section_model;

    /**
     * @var SettingsManager
     */
    protected $settings_manager;

    /**
     * UpdateSectionRequest constructor.
     *
     * @param SettingsManager $settings
     */
    public function __construct(SettingsManager $settings)
    {
        parent::__construct();

        $this->settings_manager = $settings;
    }

    /**
     * Validate whether the user can update the setting.
     *
     * @return bool authorized
     */
    public function authorize()
    {
        return $this->user()->can('update', $this->getSection());
    }

    /**
     * Form validation rules for all fields in the section.
     *
     * @return array
     */
    public function rules()
    {
        return $this->getSectionRules($this->getSection());
    }

    /**
     * Get the messages for form.
     *
     * TODO: Implement messages
     *
     * @return array
     */
    public function messages()
    {
        return parent::messages(); // TODO: Change the autogenerated stub
    }

    /**
     * Form validation rules for a specific section.
     *
     * @param Section $section
     *
     * @return array
     */
    protected function getSectionRules(Section $section)
    {
        $rules = [];

        foreach ($this->getSection()->groups as $group) {
            $rules = array_merge($rules, $this->getGroupRules($group));
        }

        return $rules;
    }

    /**
     * Form validation rules for a specific group.
     *
     * @param Group $group
     *
     * @return array
     */
    protected function getGroupRules(Group $group)
    {
        $rules = [];

        foreach ($group->fields as $field) {
            $type = $this->settings_manager->getSettingType($field);
            foreach ($type->getEditValidationRules() as $key => $rule) {
                $rules[$type->getValidationKey($key)] = $rule;
            }
        }

        return $rules;
    }

    /**
     * Get the section for the current request.
     *
     * @return Section
     */
    protected function getSection()
    {
        if ($this->section_model) {
            return $this->section_model;
        }

        try {
            return $this->section_model = $this->settings_manager->getSection($this->section);
        } catch (SettingsException $e) {
            throw new NotFoundHttpException($e->getMessage(), $e->getCode(), $e);
        }
    }
}
